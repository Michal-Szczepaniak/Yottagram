/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p calls_interface.h: ../../Yottagram/Yottagram/com.verdanditeam.yottagram.calls.xml
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef CALLS_INTERFACE_H
#define CALLS_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.verdanditeam.yottagram.calls
 */
class ComVerdanditeamYottagramCallsInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.verdanditeam.yottagram.calls"; }

public:
    ComVerdanditeamYottagramCallsInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComVerdanditeamYottagramCallsInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> callReady()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("callReady"), argumentList);
    }

    inline QDBusPendingReply<> discardCall()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("discardCall"), argumentList);
    }

    inline QDBusPendingReply<> newCall(const QString &callerName, bool incoming)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(callerName) << QVariant::fromValue(incoming);
        return asyncCallWithArgumentList(QStringLiteral("newCall"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void accept();
    void changeSpeakerMode(bool loudspeaker);
    void discard();
    void muteMicrophone(bool mute);
};

namespace com {
  namespace verdanditeam {
    namespace yottagram {
      typedef ::ComVerdanditeamYottagramCallsInterface calls;
    }
  }
}
#endif
